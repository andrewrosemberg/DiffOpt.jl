var documenterSearchIndex = {"docs":
[{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"EditURL = \"https://github.com/jump-dev/DiffOpt.jl/blob/master/docs/src/examples/sensitivity-analysis-ridge.jl\"","category":"page"},{"location":"examples/sensitivity-analysis-ridge/#Sensitivity-Analysis-of-Ridge-Regression","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"","category":"section"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"(Image: )","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"This example illustrates the sensitivity analysis of data points in a Ridge Regression problem. The general form of the problem is given below:","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"beginsplit\nbeginarray ll\nmboxminimize  sum_i=1^N (y_i - w x_i - b)^2 + alpha (w^2 + b^2) \nendarray\nendsplit","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"where","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"w, b are slope and intercept of the regressing line\nx, y are the N data points\nα is the regularization constant","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"which is equivalent to:","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"beginsplit\nbeginarray ll\nmboxminimize  e^tope + alpha (w^2) \nmboxst  e_i = y_i - w x_i - b quad quad i=1N  \nendarray\nendsplit","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"This tutorial uses the following packages","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"using JuMP\nimport DiffOpt\nimport Random\nimport Ipopt\nimport Plots\nusing LinearAlgebra: dot","category":"page"},{"location":"examples/sensitivity-analysis-ridge/#Define-and-solve-the-problem","page":"Sensitivity Analysis of Ridge Regression","title":"Define and solve the problem","text":"","category":"section"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"Construct a set of noisy (guassian) data points around a line.","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"Random.seed!(42)\n\nN = 150\n\nw = 2 * abs(randn())\nb = rand()\nX = randn(N)\nY = w * X .+ b + 0.8 * randn(N);\nnothing #hide","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"The helper method fit_ridge defines and solves the corresponding model. The ridge regression is modeled with quadratic programming (quadratic objective and linear constraints) and solved in generic methods of Ipopt. This is not the standard way of solving the ridge regression problem this is done here for didactic purposes.","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"function fit_ridge(X, Y, alpha = 0.1)\n    N = length(Y)\n    # Initialize a JuMP Model with Ipopt solver\n    model = Model(() -> DiffOpt.diff_optimizer(Ipopt.Optimizer))\n    set_silent(model)\n    @variable(model, w) # angular coefficient\n    @variable(model, b) # linear coefficient\n    # expression defining approximation error\n    @expression(model, e[i=1:N], Y[i] - w * X[i] - b)\n    # objective minimizing squared error and ridge penalty\n    @objective(\n        model,\n        Min,\n        1 / N * dot(e, e) + alpha * (w^2),\n    )\n    optimize!(model)\n    return model, w, b # return model & variables\nend","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"Plot the data points and the fitted line for different alpha values","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"p = Plots.scatter(X, Y, label=nothing, legend=:topleft)\nmi, ma = minimum(X), maximum(X)\nPlots.title!(\"Fitted lines and points\")\n\nfor alpha in 0.5:0.5:1.5\n    local model, w, b = fit_ridge(X, Y, alpha)\n    ŵ = value(w)\n    b̂ = value(b)\n    Plots.plot!(p, [mi, ma], [mi * ŵ + b̂, ma * ŵ + b̂], label=\"alpha=$alpha\", width=2)\nend\np","category":"page"},{"location":"examples/sensitivity-analysis-ridge/#Differentiate","page":"Sensitivity Analysis of Ridge Regression","title":"Differentiate","text":"","category":"section"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"Now that we've solved the problem, we can compute the sensitivity of optimal values of the slope w with respect to perturbations in the data points (x,y).","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"alpha = 0.4\nmodel, w, b = fit_ridge(X, Y, alpha)\nŵ = value(w)\nb̂ = value(b)","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"We first compute sensitivity of the slope with respect to a perturbation of the independent variable x.","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"Recalling that the points (x_i y_i) appear in the objective function as: (yi - b - w*xi)^2, the DiffOpt.ForwardInObjective attribute must be set accordingly, with the terms multiplying the parameter in the objective. When considering the perturbation of a parameter θ, DiffOpt.ForwardInObjective() takes in the expression in the objective that multiplies θ. If θ appears with a quadratic and a linear form: θ^2 a x + θ b y, then the expression to pass to ForwardInObjective is 2θ a x + b y.","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"Sensitivity with respect to x and y","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"∇y = zero(X)\n∇x = zero(X)\nfor i in 1:N\n    MOI.set(\n        model,\n        DiffOpt.ForwardInObjective(),\n        2w^2 * X[i] + 2b * w - 2 * w * Y[i]\n    )\n    DiffOpt.forward(model)\n    ∇x[i] = MOI.get(\n        model,\n        DiffOpt.ForwardOutVariablePrimal(),\n        w\n    )\n    MOI.set(\n        model,\n        DiffOpt.ForwardInObjective(),\n        (2Y[i] - 2b - 2w * X[i]),\n    )\n    DiffOpt.forward(model)\n    ∇y[i] = MOI.get(\n        model,\n        DiffOpt.ForwardOutVariablePrimal(),\n        w\n    )\nend","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"Visualize point sensitivities with respect to regression points.","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"p = Plots.scatter(\n    X, Y,\n    color = [dw < 0 ? :blue : :red for dw in ∇x],\n    markersize = [5 * abs(dw) + 1.2 for dw in ∇x],\n    label = \"\"\n)\nmi, ma = minimum(X), maximum(X)\nPlots.plot!(p, [mi, ma], [mi * ŵ + b̂, ma * ŵ + b̂], color = :blue, label = \"\")\nPlots.title!(\"Regression slope sensitivity with respect to x\")","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"p = Plots.scatter(\n    X, Y,\n    color = [dw < 0 ? :blue : :red for dw in ∇y],\n    markersize = [5 * abs(dw) + 1.2 for dw in ∇y],\n    label = \"\"\n)\nmi, ma = minimum(X), maximum(X)\nPlots.plot!(p, [mi, ma], [mi * ŵ + b̂, ma * ŵ + b̂], color = :blue, label = \"\")\nPlots.title!(\"Regression slope sensitivity with respect to y\")","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"Note the points with less central x values induce a greater y sensitivity of the slope.","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"","category":"page"},{"location":"examples/sensitivity-analysis-ridge/","page":"Sensitivity Analysis of Ridge Regression","title":"Sensitivity Analysis of Ridge Regression","text":"This page was generated using Literate.jl.","category":"page"},{"location":"intro/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"An optimization problem is the problem of finding the best solution from all feasible solutions. The standard form of an optimization problem is ","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"beginaligned\nunderset xoperatorname minimize f(x)operatorname subjectto g_i(x)leq 0quad i=1dots mh_j(x)=0quad j=1dots p\nendaligned","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"Note that finding solution to most of the optimization problems is computationally intractable. Here we consider a subset of those problems called convex optimization problems, which admit polynomial time solutions. The standard form of a convex optimization problem is ","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"beginaligned\nunderset xoperatorname minimize f(x)operatorname subjectto g_i(x)leq 0quad i=1dots mA x = b\nendaligned","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"where f and g_i are convex functions.","category":"page"},{"location":"intro/#Parameterized-problems","page":"Introduction","title":"Parameterized  problems","text":"","category":"section"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"In practice, convex optimization problems include parameters, apart from the decision variables, which determines the structure of the problem itself i.e. the objective function and constraints. Hence they affect the solution too. A general form of a parameterized convex optimization problem is ","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"beginaligned\nunderset xoperatorname minimize f(x theta)operatorname subjectto g_i(x theta)leq 0quad i=1dots mA(theta) x = b(theta)\nendaligned","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"where theta is the parameter. In different fields, these parameters go by different names:","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"Hyperparameters in machine learning\nRisk aversion or other backtesing parameters in financial modelling\nParameterized systems in control theory","category":"page"},{"location":"intro/#What-do-we-mean-by-differentiating-a-parameterized-optimization-program?-Why-do-we-need-it?","page":"Introduction","title":"What do we mean by differentiating a parameterized optimization program? Why do we need it?","text":"","category":"section"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"Often, parameters are chosen and tuned by hand - an iterative process - and the structure of the problem is crafted manually. But it is possible to do an automatic gradient based tuning of parameters.","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"Consider solution of the parametrized optimization problem, x(theta),","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"beginsplit\nbeginarray lll\nx^*(theta)= underset xoperatorname argmin  f(x theta)\n              operatorname subjectto  g_i(x theta)leq 0quad i=1dots m\n                                           A(theta) x = b(theta)\nendarray\nendsplit","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"which is the input of l(x^*(theta)), a loss function. Our goal is to choose the best parameter theta so that l is optimized. Here, l(x^*(theta)) is the objective function and theta is the decision variable. In order to apply a gradient-based strategy to this problem, we need to differentiate l with respect to theta.","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"fracpartial l(x^*(theta))partial theta = fracpartial l(x^*(theta))partial x^*(theta)  fracpartial x^*(theta)partial theta","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"By implicit function theorem, this translates to differentiating the program data, i.e. functions f, g_i(x) and matrices A, b, with respect to theta.","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"This is can be achieved in two steps or passes:","category":"page"},{"location":"intro/","page":"Introduction","title":"Introduction","text":"Forward pass - Given an initial value of theta, solves the optimization problem to find x^*(theta)\nBackward pass - Given x^*, differentiate and find fracpartial x^*(theta)partial theta","category":"page"},{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"note: Note\nAs of now, this package only works for optimization models that can be written either in convex conic form or convex quadratic form.","category":"page"},{"location":"manual/#Supported-objectives-and-constraints-scheme-1","page":"Manual","title":"Supported objectives & constraints - scheme 1","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"For QPTH/OPTNET style backend, the package supports following Function-in-Set constraints: ","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"MOI Function MOI Set\nVariableIndex GreaterThan\nVariableIndex LessThan\nVariableIndex EqualTo\nScalarAffineFunction GreaterThan\nScalarAffineFunction LessThan\nScalarAffineFunction EqualTo","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"and the following objective types: ","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"MOI Function\nVariableIndex\nScalarAffineFunction\nScalarQuadraticFunction","category":"page"},{"location":"manual/#Supported-objectives-and-constraints-scheme-2","page":"Manual","title":"Supported objectives & constraints - scheme 2","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"For DiffCP/CVXPY style backend, the package supports following Function-in-Set constraints: ","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"MOI Function MOI Set\nVectorOfVariables Nonnegatives\nVectorOfVariables Nonpositives\nVectorOfVariables Zeros\nVectorOfVariables SecondOrderCone\nVectorOfVariables PositiveSemidefiniteConeTriangle\nVectorAffineFunction Nonnegatives\nVectorAffineFunction Nonpositives\nVectorAffineFunction Zeros\nVectorAffineFunction SecondOrderCone\nVectorAffineFunction PositiveSemidefiniteConeTriangle","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"and the following objective types: ","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"MOI Function\nVariableIndex\nScalarAffineFunction","category":"page"},{"location":"manual/#Creating-a-differentiable-optimizer","page":"Manual","title":"Creating a differentiable optimizer","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"You can create a differentiable optimizer over an existing MOI solver by using the diff_optimizer utility. ","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"diff_optimizer","category":"page"},{"location":"manual/#DiffOpt.diff_optimizer","page":"Manual","title":"DiffOpt.diff_optimizer","text":"diff_optimizer(optimizer_constructor)::Optimizer\n\nCreates a DiffOpt.Optimizer, which is an MOI layer with an internal optimizer and other utility methods. Results (primal, dual and slack values) are obtained by querying the internal optimizer instantiated using the optimizer_constructor. These values are required for find jacobians with respect to problem data.\n\nOne define a differentiable model by using any solver of choice. Example:\n\njulia> import DiffOpt, HiGHS\n\njulia> model = DiffOpt.diff_optimizer(HiGHS.Optimizer)\njulia> model.add_variable(x)\njulia> model.add_constraint(...)\n\njulia> _backward_quad(model)  # for convex quadratic models\n\njulia> _backward_quad(model)  # for convex conic models\n\n\n\n\n\n","category":"function"},{"location":"manual/#Adding-new-sets-and-constraints","page":"Manual","title":"Adding new sets and constraints","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The DiffOpt Optimizer behaves similarly to other MOI Optimizers and implements the MOI.AbstractOptimizer API.","category":"page"},{"location":"manual/#Projections-on-cone-sets","page":"Manual","title":"Projections on cone sets","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"DiffOpt requires taking projections and finding projection gradients of vectors while computing the jacobians. For this purpose, we use MathOptSetDistances.jl, which is a dedicated package for computing set distances, projections and projection gradients.","category":"page"},{"location":"manual/#Conic-problem-formulation","page":"Manual","title":"Conic problem formulation","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"note: Note\nAs of now, the package is using SCS geometric form for affine expressions in cones.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Consider a convex conic optimization problem in its primal (P) and dual (D) forms:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"beginsplit\nbeginarray llcc\ntextbfPrimal Problem   textbfDual Problem  \nmboxminimize  c^T x  quad quad  mboxminimize  b^T y  \nmboxsubject to  A x + s = b  quad quad  mboxsubject to  A^T y + c = 0 \n s in mathcalK    y in mathcalK^*\nendarray\nendsplit","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"where","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"x in R^n is the primal variable, y in R^m is the dual variable, and s in R^m is the primal slack","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"variable","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"mathcalK subseteq R^m is a closed convex cone and mathcalK^* subseteq R^m is the corresponding dual cone","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"variable","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"A in R^m times n, b in R^m, c in R^n are problem data","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"In the light of above, DiffOpt differentiates program variables x, s, y  w.r.t pertubations/sensivities in problem data i.e. dA, db, dc. This is achieved via implicit differentiation and matrix differential calculus.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Note that the primal (P) and dual (D) are self-duals of each other. Similarly, for the constraints we support, mathcalK is same in format as mathcalK^*.","category":"page"},{"location":"manual/#Reference-articles","page":"Manual","title":"Reference articles","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Differentiating Through a Cone Program - Akshay Agrawal, Shane Barratt, Stephen Boyd, Enzo Busseti, Walaa M. Moursi, 2019\nA fast and differentiable QP solver for PyTorch. Crafted by Brandon Amos and J. Zico Kolter.\nOptNet: Differentiable Optimization as a Layer in Neural Networks","category":"page"},{"location":"manual/#Backward-Pass-vector","page":"Manual","title":"Backward Pass vector","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"One possible point of confusion in finding Jacobians is the role of the backward pass vector - above eqn (7), OptNet: Differentiable Optimization as a Layer in Neural Networks. While differentiating convex programs, it is often the case that we don't want to find the acutal derivatives, rather we might be interested in computing the product of Jacobians with a backward pass vector, often used in backprop in machine learning/automatic differentiation. This is what happens in scheme 1 of DiffOpt backend.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"But, for the conic system (scheme 2), we provide perturbations in conic data (dA, db, dc) to compute pertubations (dx, dy, dz) in input variables. Unlike the quadratic case, these perturbations are actual derivatives, not the product with a backward pass vector. This is an important distinction between the two schemes of differential optimization.","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"EditURL = \"https://github.com/jump-dev/DiffOpt.jl/blob/master/docs/src/examples/sensitivity-analysis-svm.jl\"","category":"page"},{"location":"examples/sensitivity-analysis-svm/#Sensitivity-Analysis-of-SVM","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"","category":"section"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"(Image: )","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"This notebook illustrates sensitivity analysis of data points in a Support Vector Machine (inspired from @matbesancon's SimpleSVMs.)","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"For reference, Section 10.1 of https://online.stat.psu.edu/stat508/book/export/html/792 gives an intuitive explanation of what it means to have a sensitive hyperplane or data point. The general form of the SVM training problem is given below (with ell_2 regularization):","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"beginsplit\nbeginarray ll\nmboxminimize  lambdaw^2 + sum_i=1^N xi_i \nmboxst  xi_i ge 0 quad quad i=1N  \n             y_i (w^T X_i + b) ge 1 - xi_i quad i=1N  \nendarray\nendsplit","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"where","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"X, y are the N data points\nw is the support vector\nb determines the offset b/||w|| of the hyperplane with normal w\nξ is the soft-margin loss\nλ is the ell_2 regularization.","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"This tutorial uses the following packages","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"using JuMP     # The mathematical programming modelling language\nimport DiffOpt # JuMP extension for differentiable optimization\nimport Ipopt   # Optimization solver that handles quadratic programs\nimport Plots   # Graphing tool\nimport LinearAlgebra: dot, norm\nimport Random","category":"page"},{"location":"examples/sensitivity-analysis-svm/#Define-and-solve-the-SVM","page":"Sensitivity Analysis of SVM","title":"Define and solve the SVM","text":"","category":"section"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"Construct two clusters of data points.","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"N = 100\nD = 2\n\nRandom.seed!(62)\nX = vcat(randn(N ÷ 2, D), randn(N ÷ 2, D) .+ [2.0, 2.0]')\ny = append!(ones(N ÷ 2), -ones(N ÷ 2))\nλ = 0.05;\nnothing #hide","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"Let's initialize a special model that can understand sensitivities","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"model = Model(() -> DiffOpt.diff_optimizer(Ipopt.Optimizer))\nMOI.set(model, MOI.Silent(), true)","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"Add the variables","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"@variable(model, ξ[1:N] >= 0)\n@variable(model, w[1:D])\n@variable(model, b);\nnothing #hide","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"Add the constraints.","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"@constraint(model, con[i in 1:N],\n    y[i] * (dot(X[i, :], w) + b) >= 1 - ξ[i]\n);\nnothing #hide","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"Define the objective and solve","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"@objective(model,\n    Min, λ * dot(w, w) + sum(ξ),\n)\n\noptimize!(model)","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"We can visualize the separating hyperplane.","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"loss = objective_value(model)\n\nwv = value.(w)\n\nbv = value(b)\n\nsvm_x = [-2.0, 4.0] # arbitrary points\nsvm_y = (-bv .- wv[1] * svm_x )/wv[2]\n\np = Plots.scatter(X[:,1], X[:,2], color = [yi > 0 ? :red : :blue for yi in y], label = \"\")\nPlots.plot!(p, svm_x, svm_y, label = \"loss = $(round(loss, digits=2))\", width=3)","category":"page"},{"location":"examples/sensitivity-analysis-svm/#Gradient-of-hyperplane-wrt-the-data-point-coordinates","page":"Sensitivity Analysis of SVM","title":"Gradient of hyperplane wrt the data point coordinates","text":"","category":"section"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"Now that we've solved the SVM, we can compute the sensitivity of optimal values – the separating hyperplane in our case – with respect to perturbations of the problem data – the data points – using DiffOpt.","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"How does a change in coordinates of the data points, X, affects the position of the hyperplane? This is achieved by finding gradients of w and b with respect to X[i].","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"Begin differentiating the model. analogous to varying θ in the expression:","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"y_i (w^T (X_i + theta) + b) ge 1 - xi_i","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"∇ = zeros(N)\nfor i in 1:N\n    for j in 1:N\n        if i == j\n            # we consider identical perturbations on all x_i coordinates\n            MOI.set(model, DiffOpt.ForwardInConstraint(), con[j], y[j] * sum(w))\n        else\n            MOI.set(model, DiffOpt.ForwardInConstraint(), con[j], 0.0)\n        end\n    end\n    DiffOpt.forward(model)\n    dw = MOI.get.(model, DiffOpt.ForwardOutVariablePrimal(), w)\n    db = MOI.get(model, DiffOpt.ForwardOutVariablePrimal(), b)\n    ∇[i] = norm(dw) + norm(db)\nend","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"We can visualize the separating hyperplane sensitivity with respect to the data points. Note that all the small numbers were converted into 1/10 of the largest value to show all the points of the set.","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"p3 = Plots.scatter(\n    X[:,1], X[:,2],\n    color = [yi > 0 ? :red : :blue for yi in y], label = \"\",\n    markersize = 2 * (max.(1.8∇, 0.2 * maximum(∇))),\n)\nPlots.yaxis!(p3, (-2, 4.5))\nPlots.plot!(p3, svm_x, svm_y, label = \"\", width=3)\nPlots.title!(\"Sensitivity of the separator to data point variations\")","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"","category":"page"},{"location":"examples/sensitivity-analysis-svm/","page":"Sensitivity Analysis of SVM","title":"Sensitivity Analysis of SVM","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"EditURL = \"https://github.com/jump-dev/DiffOpt.jl/blob/master/docs/src/examples/matrix-inversion-manual.jl\"","category":"page"},{"location":"examples/matrix-inversion-manual/#Differentiating-a-QP-wrt-a-single-variable","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"","category":"section"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"(Image: )","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Consider the quadratic program","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"beginsplit\nbeginarray ll\nmboxminimize  frac12 x^T Q x + q^T x \nmboxsubject to  G x leq h x in mathcalR^2 \nendarray\nendsplit","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"where Q, q, G are fixed and h is the single parameter.","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"In this example, we'll try to differentiate the QP wrt h, by finding its jacobian by hand (using Eqn (6) of QPTH article) and compare the results:","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Manual compuation\nUsing JuMP and DiffOpt","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Assuming","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Q = [[4, 1], [1, 2]]\nq = [1, 1]\nG = [1, 1]","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"and begining with a starting value of h=-1","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"few values just for reference","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"variable optimal value note\nx* [-0.25; -0.75] Primal optimal\n𝜆∗ -0.75 Dual optimal","category":"page"},{"location":"examples/matrix-inversion-manual/#Finding-Jacobian-using-matrix-inversion","page":"Differentiating a QP wrt a single variable","title":"Finding Jacobian using matrix inversion","text":"","category":"section"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Lets formulate Eqn (6) of QPTH article for our QP. If we assume h as the only parameter and Q,q,G as fixed problem data - also note that our QP doesn't involves Ax=b constraint - then Eqn (6) reduces to","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"begingather\n beginbmatrix\n     Q  g^T \n     lambda^* G  G x^* - h\n endbmatrix\n beginbmatrix\n     dx \n     d lambda\n endbmatrix\n =\n  beginbmatrix\n   0 \n   lambda^* dh\n   endbmatrix\nendgather","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Now to find the jacobians $ \\frac{\\partial x}{\\partial h}, \\frac{\\partial \\lambda}{\\partial h}$ we substitute dh = I = [1] and plug in values of Q,q,G to get","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"begingather\n beginbmatrix\n     4  1  1 \n     1  2  1 \n     -075  -075  0\n endbmatrix\n beginbmatrix\n     fracpartial x_1partial h \n     fracpartial x_2partial h \n     fracpartial lambdapartial h\n endbmatrix\n =\n  beginbmatrix\n   0 \n   0 \n   -075\n   endbmatrix\nendgather","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Upon solving using matrix inversion, the jacobian is","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"fracpartial x_1partial h = 025 fracpartial x_2partial h = 075 fracpartial lambdapartial h = -175","category":"page"},{"location":"examples/matrix-inversion-manual/#Finding-Jacobian-using-JuMP-and-DiffOpt","page":"Differentiating a QP wrt a single variable","title":"Finding Jacobian using JuMP and DiffOpt","text":"","category":"section"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"using JuMP\nimport DiffOpt\nimport Ipopt\n\nn = 2 # variable dimension\nm = 1; # no of inequality constraints\n\nQ = [4. 1.;1. 2.]\nq = [1.; 1.]\nG = [1. 1.;]\nh = [-1.;]   # initial values set","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Initialize empty model","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"model = Model(() -> DiffOpt.diff_optimizer(Ipopt.Optimizer))\nset_silent(model)","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Add the variables","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"@variable(model, x[1:2])","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Add the constraints.","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"@constraint(\n    model,\n    cons[j in 1:1],\n    sum(G[j, i] * x[i] for i in 1:2)  <= h[j]\n);\n\n@objective(\n    model,\n    Min,\n    1/2 * sum(Q[j, i] * x[i] *x[j] for i in 1:2, j in 1:2) +\n    sum(q[i] * x[i] for i in 1:2)\n)","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Solve problem","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"optimize!(model)","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"primal solution","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"value.(x)","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"dual solution","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"dual.(cons)","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"set sentivitity","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"MOI.set(\n    model,\n    DiffOpt.ForwardInConstraint(),\n    cons[1],\n    0.0 * index(x[1]) - 1.0,  # to indicate the direction vector to get directional derivatives\n)","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Note that 0.0 * index(x[1]) is used to make its type typeof(0.0 * index(x[1]) - 1.0) <: MOI.AbstractScalarFunction. To indicate different direction to get directional derivative, users should replace 0.0 * index(x[1]) - 1.0 as the form of dG*x - dh, where dG and dh correspond to the elements of direction vectors along G and h axes, respectively.","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Compute derivatives","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"DiffOpt.forward(model)","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"Query derivative","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"dx = MOI.get.(\n    model,\n    DiffOpt.ForwardOutVariablePrimal(),\n    x,\n)","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"","category":"page"},{"location":"examples/matrix-inversion-manual/","page":"Differentiating a QP wrt a single variable","title":"Differentiating a QP wrt a single variable","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"EditURL = \"https://github.com/jump-dev/DiffOpt.jl/blob/master/docs/src/examples/autotuning-ridge.jl\"","category":"page"},{"location":"examples/autotuning-ridge/#Auto-tuning-Hyperparameters","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"","category":"section"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"(Image: )","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"This example shows how to learn a hyperparameter in Ridge Regression using a gradient descent routine. Let the regularized regression problem be formulated as:","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"beginequation\nmin_w quad frac12nd sum_i=1^n (w^T x_i - y_i)^2 + fracalpha2d  w _2^2\nendequation","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"where","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"x, y are the data points\nw are the learned weights\nα is the hyperparameter acting on regularization.","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"The main optimization model will be formulated with JuMP. Using the gradient of the optimal weights with respect to the regularization parameters computed with DiffOpt, we can perform a gradient descent on top of the inner model to minimize the test loss.","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"This tutorial uses the following packages","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"using JuMP     # The mathematical programming modelling language\nimport DiffOpt # JuMP extension for differentiable optimization\nimport Ipopt    # Optimization solver that handles quadratic programs\nimport Plots   # Graphing tool\nimport LinearAlgebra: norm, dot\nimport Random","category":"page"},{"location":"examples/autotuning-ridge/#Generating-a-noisy-regression-dataset","page":"Auto-tuning Hyperparameters","title":"Generating a noisy regression dataset","text":"","category":"section"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Random.seed!(42)\n\nN = 100\nD = 20\nnoise = 5\n\nw_real = 10 * randn(D)\nX = 10 * randn(N, D)\ny = X * w_real + noise * randn(N)\nl = N ÷ 2  # test train split\n\nX_train = X[1:l, :]\nX_test  = X[l+1:N, :]\ny_train = y[1:l]\ny_test  = y[l+1:N];\nnothing #hide","category":"page"},{"location":"examples/autotuning-ridge/#Defining-the-regression-problem","page":"Auto-tuning Hyperparameters","title":"Defining the regression problem","text":"","category":"section"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"We implement the regularized regression problem as a function taking the problem data, building a JuMP model and solving it.","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"function fit_ridge(model, X, y, α)\n    JuMP.empty!(model)\n    set_silent(model)\n    N, D = size(X)\n    @variable(model, w[1:D])\n    err_term = X * w - y\n    @objective(\n        model,\n        Min,\n        dot(err_term, err_term) / (2 * N * D) + α * dot(w, w) / (2 * D),\n    )\n    optimize!(model)\n    @assert termination_status(model) in [MOI.OPTIMAL, MOI.LOCALLY_SOLVED, MOI.ALMOST_LOCALLY_SOLVED]\n    return w\nend","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"We can solve the problem for several values of α to visualize the effect of regularization on the testing and training loss.","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"αs = 0.00:0.01:0.50\nmse_test = Float64[]\nmse_train = Float64[]\nmodel = Model(() -> DiffOpt.diff_optimizer(Ipopt.Optimizer))\n(Ntest, D) = size(X_test)\n(Ntrain, D) = size(X_train)\nfor α in αs\n    w = fit_ridge(model, X_train, y_train, α)\n    ŵ = value.(w)\n    ŷ_test = X_test * ŵ\n    ŷ_train = X_train * ŵ\n    push!(mse_test, norm(ŷ_test - y_test)^2 / (2 * Ntest * D))\n    push!(mse_train, norm(ŷ_train - y_train)^2 / (2 * Ntrain * D))\nend","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Visualize the Mean Score Error metric","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Plots.plot(\n    αs, mse_test ./ sum(mse_test),\n    label=\"MSE test\", xaxis = \"α\", yaxis=\"MSE\", legend=(0.8, 0.2)\n)\nPlots.plot!(\n    αs, mse_train ./ sum(mse_train),\n    label=\"MSE train\"\n)\nPlots.title!(\"Normalized MSE on training and testing sets\")","category":"page"},{"location":"examples/autotuning-ridge/#Leveraging-differentiable-optimization:-computing-the-derivative-of-the-solution","page":"Auto-tuning Hyperparameters","title":"Leveraging differentiable optimization: computing the derivative of the solution","text":"","category":"section"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Using DiffOpt, we can compute ∂w_i/∂α, the derivative of the learned solution ̂w w.r.t. the regularization parameter.","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"function compute_dw_dα(model, w)\n    D = length(w)\n    dw_dα = zeros(D)\n    MOI.set(\n        model,\n        DiffOpt.ForwardInObjective(),\n        dot(w, w)  / (2 * D),\n    )\n    DiffOpt.forward(model)\n    for i in 1:D\n        dw_dα[i] = MOI.get(\n            model,\n            DiffOpt.ForwardOutVariablePrimal(),\n            w[i],\n        )\n    end\n    return dw_dα\nend","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Using ∂w_i/∂α computed with compute_dw_dα, we can compute the derivative of the test loss w.r.t. the parameter α by composing derivatives.","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"function d_testloss_dα(model, X_test, y_test, w, ŵ)\n    N, D = size(X_test)\n    dw_dα = compute_dw_dα(model, w)\n    err_term = X_test * ŵ - y_test\n    return sum(eachindex(err_term)) do i\n        dot(X_test[i,:], dw_dα) * err_term[i]\n    end / (N * D)\nend","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"We can define a meta-optimizer function performing gradient descent on the test loss w.r.t. the regularization parameter.","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"function descent(α0, max_iters=100; fixed_step = 0.01, grad_tol=1e-3)\n    α_s = Float64[]\n    ∂α_s = Float64[]\n    test_loss = Float64[]\n    α = α0\n    N, D = size(X_test)\n    model = Model(() -> DiffOpt.diff_optimizer(Ipopt.Optimizer))\n    for iter in 1:max_iters\n        w = fit_ridge(model, X_train, y_train, α)\n        ŵ = value.(w)\n        err_term = X_test * ŵ - y_test\n        ∂α = d_testloss_dα(model, X_test, y_test, w, ŵ)\n        push!(α_s, α)\n        push!(∂α_s, ∂α)\n        push!(test_loss, norm(err_term)^2 / (2 * N * D))\n        α -= fixed_step * ∂α\n        if abs(∂α) ≤ grad_tol\n            break\n        end\n    end\n    return α_s, ∂α_s, test_loss\nend\n\nᾱ, ∂ᾱ, msē = descent(0.10, 500)\niters = 1:length(ᾱ);\nnothing #hide","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Visualize gradient descent and convergence","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Plots.plot(\n    αs, mse_test,\n    label=\"MSE test\", xaxis = (\"α\"), legend=:topleft\n)\nPlots.plot!(ᾱ, msē, label=\"learned α\", lw = 2)\nPlots.title!(\"Regularizer learning\")","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Visualize the convergence of α to its optimal value","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Plots.plot(\n    iters, ᾱ, label = nothing, color = :blue,\n    xaxis = (\"Iterations\"), legend=:bottom,\n    title = \"Convergence of α\"\n)","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Visualize the convergence of the objective function","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Plots.plot(\n    iters, msē, label = nothing, color = :red,\n    xaxis = (\"Iterations\"), legend=:bottom,\n    title = \"Convergence of MSE\"\n)","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Visualize the convergence of the derivative to zero","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"Plots.plot(\n    iters, ∂ᾱ, label = nothing, color = :green,\n    xaxis = (\"Iterations\"), legend=:bottom,\n    title = \"Convergence of ∂α\"\n)","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"","category":"page"},{"location":"examples/autotuning-ridge/","page":"Auto-tuning Hyperparameters","title":"Auto-tuning Hyperparameters","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"EditURL = \"https://github.com/jump-dev/DiffOpt.jl/blob/master/docs/src/examples/polyhedral_project.jl\"","category":"page"},{"location":"examples/polyhedral_project/#Polyhedral-QP-layer","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"","category":"section"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"(Image: )","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"We use DiffOpt to define a custom network layer which, given an input matrix y, computes its projection onto a polytope defined by a fixed number of inequalities: a_i^T x ≥ b_i. A neural network is created using Flux.jl and trained on the MNIST dataset, integrating this quadratic optimization layer.","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"The QP is solved in the forward pass, and its DiffOpt derivative is used in the backward pass expressed with ChainRulesCore.rrule.","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"This example is similar to the custom ReLU layer, except that the layer is parameterized by the hyperplanes (w,b) and not a simple stateless function. This also means that ChainRulesCore.rrule must return the derivatives of the output with respect to the layer parameters to allow for backpropagation.","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"using JuMP\nimport DiffOpt\nimport Ipopt\nimport ChainRulesCore\nimport Flux\nimport MLDatasets\nimport Statistics\nusing Base.Iterators: repeated\nusing LinearAlgebra\nusing Random\n\nRandom.seed!(42)","category":"page"},{"location":"examples/polyhedral_project/#The-Polytope-representation-and-its-derivative","page":"Polyhedral QP layer","title":"The Polytope representation and its derivative","text":"","category":"section"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"struct Polytope{N}\n    w::NTuple{N, Matrix{Float64}}\n    b::Vector{Float64}\nend\n\nPolytope(w::NTuple{N}) where {N} = Polytope{N}(w, randn(N))","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"We define a \"call\" operation on the polytope, making it a so-called functor. Calling the polytope with a matrix y operates an Euclidean projection of this matrix onto the polytope.","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"function (polytope::Polytope)(y::AbstractMatrix; model = direct_model(DiffOpt.diff_optimizer(Ipopt.Optimizer)))\n    N, M = size(y)\n    empty!(model)\n    set_silent(model)\n    @variable(model, x[1:N, 1:M])\n    @constraint(model, greater_than_cons[idx in 1:length(polytope.w)], dot(polytope.w[idx], x) ≥ polytope.b[idx])\n    @objective(model, Min, dot(x - y, x - y))\n    optimize!(model)\n    return JuMP.value.(x)\nend","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"The @functor macro from Flux implements auxiliary functions for collecting the parameters of our custom layer and operating backpropagation.","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"Flux.@functor Polytope","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"Define the reverse differentiation rule, for the function we defined above. Flux uses ChainRules primitives to implement reverse-mode differentiation of the whole network. To learn the current layer (the polytope the layer contains), the gradient is computed with respect to the Polytope fields in a ChainRulesCore.Tangent type which is used to represent derivatives with respect to structs. For more details about backpropagation, visit Introduction, ChainRulesCore.jl.","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"function ChainRulesCore.rrule(polytope::Polytope, y::AbstractMatrix)\n    model = direct_model(DiffOpt.diff_optimizer(Ipopt.Optimizer))\n    xv = polytope(y; model = model)\n    function pullback_matrix_projection(dl_dx)\n        dl_dx = ChainRulesCore.unthunk(dl_dx)\n        #  `dl_dy` is the derivative of `l` wrt `y`\n        x = model[:x]\n        # grad wrt input parameters\n        dl_dy = zeros(size(dl_dx))\n        # grad wrt layer parameters\n        dl_dw = zero.(polytope.w)\n        dl_db = zero(polytope.b)\n        # set sensitivities\n        MOI.set.(model, DiffOpt.BackwardInVariablePrimal(), x, dl_dx)\n        # compute grad\n        DiffOpt.backward(model)\n        # compute gradient wrt objective function parameter y\n        obj_expr = MOI.get(model, DiffOpt.BackwardOutObjective())\n        dl_dy .= -2 * JuMP.coefficient.(obj_expr, x)\n        greater_than_cons = model[:greater_than_cons]\n        for idx in eachindex(dl_dw)\n            cons_expr = MOI.get(model, DiffOpt.BackwardOutConstraint(), greater_than_cons[idx])\n            dl_db[idx] = -JuMP.constant(cons_expr)\n            dl_dw[idx] .= JuMP.coefficient.(cons_expr, x)\n        end\n        dself = ChainRulesCore.Tangent{typeof(polytope)}(; w = dl_dw, b = dl_db)\n        return (dself, dl_dy)\n    end\n    return xv, pullback_matrix_projection\nend","category":"page"},{"location":"examples/polyhedral_project/#Prepare-data","page":"Polyhedral QP layer","title":"Prepare data","text":"","category":"section"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"N = 500\nimgs = MLDatasets.MNIST.traintensor(1:N)\nlabels = MLDatasets.MNIST.trainlabels(1:N);\nnothing #hide","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"Preprocessing","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"train_X = float.(reshape(imgs, size(imgs, 1) * size(imgs, 2), N)) ## stack all the images\ntrain_Y = Flux.onehotbatch(labels, 0:9);\n\ntest_imgs = MLDatasets.MNIST.testtensor(1:N)\ntest_X = float.(reshape(test_imgs, size(test_imgs, 1) * size(test_imgs, 2), N))\ntest_Y = Flux.onehotbatch(MLDatasets.MNIST.testlabels(1:N), 0:9);\nnothing #hide","category":"page"},{"location":"examples/polyhedral_project/#Define-the-Network","page":"Polyhedral QP layer","title":"Define the Network","text":"","category":"section"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"inner = 20\n\nm = Flux.Chain(\n    Flux.Dense(784, inner), ## 784 being image linear dimension (28 x 28)\n    Polytope((randn(inner, N), randn(inner, N), randn(inner, N))),\n    Flux.Dense(inner, 10), ## 10 being the number of outcomes (0 to 9)\n    Flux.softmax,\n)","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"Define input data The original data is repeated epochs times because Flux.train! only loops through the data set once","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"epochs = 50\n\ndataset = repeated((train_X, train_Y), epochs);\nnothing #hide","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"Parameters for the network training","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"training loss function, Flux optimizer","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"custom_loss(x, y) = Flux.crossentropy(m(x), y)\nopt = Flux.ADAM()\nevalcb = () -> @show(custom_loss(train_X, train_Y))","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"Train to optimize network parameters","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"Flux.train!(custom_loss, Flux.params(m), dataset, opt, cb = Flux.throttle(evalcb, 5));\nnothing #hide","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"Although our custom implementation takes time, it is able to reach similar accuracy as the usual ReLU function implementation.","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"Average of correct guesses","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"accuracy(x, y) = Statistics.mean(Flux.onecold(m(x)) .== Flux.onecold(y));\nnothing #hide","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"Training accuracy","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"accuracy(train_X, train_Y)","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"Test accuracy","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"accuracy(test_X, test_Y)","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"Note that the accuracy is low due to simplified training. It is possible to increase the number of samples N, the number of epochs epoch and the connectivity inner.","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"","category":"page"},{"location":"examples/polyhedral_project/","page":"Polyhedral QP layer","title":"Polyhedral QP layer","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [DiffOpt]","category":"page"},{"location":"reference/#DiffOpt.AbstractLazyScalarFunction","page":"Reference","title":"DiffOpt.AbstractLazyScalarFunction","text":"abstract type AbstractLazyScalarFunction <: MOI.AbstractScalarFunction end\n\nSubtype of MOI.AbstractScalarFunction that is not a standard MOI scalar function but can be converted to one using standard_form.\n\nThe function can also be inspected lazily using JuMP.coefficient or quad_sym_half.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.BackwardInVariablePrimal","page":"Reference","title":"DiffOpt.BackwardInVariablePrimal","text":"BackwardInVariablePrimal <: MOI.AbstractVariableAttribute\n\nA MOI.AbstractVariableAttribute to set input data to backward differentiation, that is, problem solution.\n\nFor instance, to set the tangent of the variable of index vi, do the following:\n\nMOI.set(model, DiffOpt.BackwardInVariablePrimal(), x)\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.BackwardOutConstraint","page":"Reference","title":"DiffOpt.BackwardOutConstraint","text":"BackwardOutConstraint\n\nAn MOI.AbstractConstraintAttribute to get output data to backward differentiation, that is, problem input data.\n\nFor instance, if the following returns x + 2y + 5, it means that the tangent has coordinate 1 for the coefficient of x, coordinate 2 for the coefficient of y and 5 for the function constant. If the constraint is of the form func == constant or func <= constant, the tangent for the constant on the right-hand side is -5.\n\nMOI.get(model, DiffOpt.BackwardOutConstraint(), ci)\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.BackwardOutObjective","page":"Reference","title":"DiffOpt.BackwardOutObjective","text":"BackwardOutObjective <: MOI.AbstractModelAttribute\n\nA MOI.AbstractModelAttribute to get output data to backward differentiation, that is, problem input data.\n\nFor instance, to get the tangent of the objective function corresponding to the tangent given to BackwardInVariablePrimal, do the following:\n\nfunc = MOI.get(model, DiffOpt.BackwardOutObjective())\n\nThen, to get the sensitivity of the linear term with variable x, do\n\nJuMP.coefficient(func, x)\n\nTo get the sensitivity with respect to the quadratic term with variables x and y, do either\n\nJuMP.coefficient(func, x, y)\n\nor\n\nDiffOpt.quad_sym_half(func, x, y)\n\nwarning: Warning\nThese two lines are not equivalent in case x == y, see quad_sym_half for the details on the difference between these two functions.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.ForwardInConstraint","page":"Reference","title":"DiffOpt.ForwardInConstraint","text":"ForwardInConstraint <: MOI.AbstractConstraintAttribute\n\nA MOI.AbstractConstraintAttribute to set input data to forward differentiation, that is, problem input data.\n\nFor instance, if the scalar constraint of index ci contains θ * (x + 2y) <= 5θ, for the purpose of computing the derivative with respect to θ, the following should be set:\n\nMOI.set(model, DiffOpt.ForwardInConstraint(), ci, 1.0 * x + 2.0 * y - 5.0)\n\nNote that we use -5 as the ForwardInConstraint sets the tangent of the ConstraintFunction so we consider the expression θ * (x + 2y - 5).\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.ForwardInObjective","page":"Reference","title":"DiffOpt.ForwardInObjective","text":"ForwardInObjective <: MOI.AbstractModelAttribute\n\nA MOI.AbstractModelAttribute to set input data to forward differentiation, that is, problem input data. The possible values are any MOI.AbstractScalarFunction. A MOI.ScalarQuadraticFunction can only be used in linearly constrained quadratic models.\n\nFor instance, if the objective contains θ * (x + 2y), for the purpose of computing the derivative with respect to θ, the following should be set:\n\nMOI.set(model, DiffOpt.ForwardInObjective(), 1.0 * x + 2.0 * y)\n\nwhere x and y are the relevant MOI.VariableIndex.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.ForwardOutVariablePrimal","page":"Reference","title":"DiffOpt.ForwardOutVariablePrimal","text":"ForwardOutVariablePrimal <: MOI.AbstractVariableAttribute\n\nA MOI.AbstractVariableAttribute to get output data from forward differentiation, that is, problem solution.\n\nFor instance, to get the tangent of the variable of index vi corresponding to the tangents given to ForwardInObjective and ForwardInConstraint, do the following:\n\nMOI.get(model, DiffOpt.ForwardOutVariablePrimal(), vi)\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.IndexMappedFunction","page":"Reference","title":"DiffOpt.IndexMappedFunction","text":"IndexMappedFunction{F<:MOI.AbstractFunction} <: AbstractLazyScalarFunction\n\nLazily represents the function MOI.Utilities.map_indices(index_map, DiffOpt.standard_form(func)).\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.MOItoJuMP","page":"Reference","title":"DiffOpt.MOItoJuMP","text":"MOItoJuMP{F<:MOI.AbstractScalarFunction} <: JuMP.AbstractJuMPScalar\n\nLazily represents the function JuMP.jump_function(model, DiffOpt.standard_form(func)).\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.MatrixScalarQuadraticFunction","page":"Reference","title":"DiffOpt.MatrixScalarQuadraticFunction","text":"struct MatrixScalarQuadraticFunction{T, VT, MT} <: MOI.AbstractScalarFunction\n    affine::VectorScalarAffineFunction{T,VT}\n    terms::MT\nend\n\nRepresents the function x' * terms * x / 2 + affine as an MOI.AbstractScalarFunction where x[i] = MOI.VariableIndex(i). Use standard_form to convert it to a MOI.ScalarQuadraticFunction{T}.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.MatrixVectorAffineFunction","page":"Reference","title":"DiffOpt.MatrixVectorAffineFunction","text":"MatrixVectorAffineFunction{T, VT} <: MOI.AbstractVectorFunction\n\nRepresents the function terms * x + constant as an MOI.AbstractVectorFunction where x[i] = MOI.VariableIndex(i). Use standard_form to convert it to a MOI.VectorAffineFunction{T}.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.ProductOfSets","page":"Reference","title":"DiffOpt.ProductOfSets","text":"ProductOfSets{T} <: MOI.Utilities.OrderedProductOfSets{T}\n\nThe MOI.Utilities.@product_of_sets macro requires to know the list of sets at compile time. In DiffOpt however, the list depends on what the user is going to use as set as DiffOpt supports any set as long as it implements the required function of MathOptSetDistances. For this type, the list of sets can be given a run-time.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.ProgramClass","page":"Reference","title":"DiffOpt.ProgramClass","text":"ProgramClass <: MOI.AbstractOptimizerAttribute\n\nDetermines which program class to used from ProgramClassCode. The default is AUTOMATIC.\n\nOne important advantage of setting the class explicitly is that it will allow necessary bridges to be used. If the class is AUTOMATIC then DiffOpt.Optimizer will report that it supports both objective and constraints of the QP and CP classes. For instance, it will reports that is supports both quadratic objective and conic constraints. However, at the differentiation stage, we won't be able to differentiate since QP does not support conic constraints and CP does not support quadratic objective. On the other hand, if the ProgramClass is set to CONIC then DiffOpt.Optimizer will report that it does not support quadratic objective hence it will be bridged to second-order cone constraints and we will be able to use CP to differentiate.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.ProgramClassCode","page":"Reference","title":"DiffOpt.ProgramClassCode","text":"@enum ProgramClassCode QUADRATIC CONIC AUTOMATIC\n\nProgram class used by DiffOpt. DiffOpt implements differentiation of two different program class:\n\nQuadratic Program (QP): quadratic objective and linear constraints and\nConic Program (CP): linear objective and conic constraints.\n\nAUTOMATIC which means that the class will be automatically selected given the problem data: if any constraint is conic, CP is used and QP is used otherwise. See ProgramClass.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.ProgramClassUsed","page":"Reference","title":"DiffOpt.ProgramClassUsed","text":"ProgramClassUsed <: MOI.AbstractOptimizerAttribute\n\nProgram class actually used, same as ProgramClass except that it does not return AUTOMATIC but the class automatically chosen instead. This attribute is read-only, it cannot be set, set ProgramClass instead.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.VectorScalarAffineFunction","page":"Reference","title":"DiffOpt.VectorScalarAffineFunction","text":"VectorScalarAffineFunction{T, VT} <: MOI.AbstractScalarFunction\n\nRepresents the function x ⋅ terms + constant as an MOI.AbstractScalarFunction where x[i] = MOI.VariableIndex(i). Use standard_form to convert it to a MOI.ScalarAffineFunction{T}.\n\n\n\n\n\n","category":"type"},{"location":"reference/#DiffOpt.Dπ-Union{Tuple{T}, Tuple{Vector{T}, MathOptInterface.ModelLike, DiffOpt.ProductOfSets}} where T","page":"Reference","title":"DiffOpt.Dπ","text":"Dπ(v::Vector{Float64}, model, cones::ProductOfSets)\n\nGiven a model, its cones, find the gradient of the projection of the vectors v of length equal to the number of rows in the conic form onto the cartesian product of the cones corresponding to these rows. For more info, refer to https://github.com/matbesancon/MathOptSetDistances.jl\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffOpt.backward-Tuple{DiffOpt.ConicDiff}","page":"Reference","title":"DiffOpt.backward","text":"backward(model::ConicDiff)\n\nMethod to compute the product of the transpose of the derivative (Jacobian) at the conic program parameters A, b, c  to the perturbations dx, dy, ds. This is similar to backward.\n\nFor theoretical background, refer Section 3 of Differentiating Through a Cone Program, https://arxiv.org/abs/1904.09043\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffOpt.backward-Tuple{DiffOpt.Optimizer}","page":"Reference","title":"DiffOpt.backward","text":"backward(model::Optimizer)\n\nWrapper method for the backward pass. This method will consider as input a currently solved problem and differentials with respect to the solution set with the BackwardInVariablePrimal attribute. The output problem data differentials can be queried with the attributes BackwardOutObjective and BackwardOutConstraint.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffOpt.backward-Tuple{DiffOpt.QPDiff}","page":"Reference","title":"DiffOpt.backward","text":"backward(model::QPDiff)\n\nMethod to differentiate optimal solution z and return product of jacobian matrices (dz / dQ, dz / dq, etc) with the backward pass vector dl / dz\n\nThe method computes the product of\n\njacobian of problem solution z* with respect to  problem parameters set with the BackwardInVariablePrimal\na backward pass vector dl / dz, where l can be a loss function\n\nNote that this method does not returns the actual jacobians.\n\nFor more info refer eqn(7) and eqn(8) of https://arxiv.org/pdf/1703.00443.pdf\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffOpt.create_LHS_matrix","page":"Reference","title":"DiffOpt.create_LHS_matrix","text":"create_LHS_matrix(z, λ, Q, G, h, A=nothing)\n\nInverse matrix specified on RHS of eqn(7) in https://arxiv.org/pdf/1703.00443.pdf\n\nHelper method while calling _backward_quad\n\n\n\n\n\n","category":"function"},{"location":"reference/#DiffOpt.diff_optimizer-Tuple{Any}","page":"Reference","title":"DiffOpt.diff_optimizer","text":"diff_optimizer(optimizer_constructor)::Optimizer\n\nCreates a DiffOpt.Optimizer, which is an MOI layer with an internal optimizer and other utility methods. Results (primal, dual and slack values) are obtained by querying the internal optimizer instantiated using the optimizer_constructor. These values are required for find jacobians with respect to problem data.\n\nOne define a differentiable model by using any solver of choice. Example:\n\njulia> import DiffOpt, HiGHS\n\njulia> model = DiffOpt.diff_optimizer(HiGHS.Optimizer)\njulia> model.add_variable(x)\njulia> model.add_constraint(...)\n\njulia> _backward_quad(model)  # for convex quadratic models\n\njulia> _backward_quad(model)  # for convex conic models\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffOpt.forward-Tuple{DiffOpt.ConicDiff}","page":"Reference","title":"DiffOpt.forward","text":"forward(model::ConicDiff)\n\nMethod to compute the product of the derivative (Jacobian) at the conic program parameters A, b, c  to the perturbations dA, db, dc. This is similar to forward.\n\nFor theoretical background, refer Section 3 of Differentiating Through a Cone Program, https://arxiv.org/abs/1904.09043\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffOpt.forward-Tuple{DiffOpt.Optimizer}","page":"Reference","title":"DiffOpt.forward","text":"forward(model::Optimizer)\n\nWrapper method for the forward pass. This method will consider as input a currently solved problem and differentials with respect to problem data set with the ForwardInObjective and  ForwardInConstraint attributes. The output solution differentials can be queried with the attribute ForwardOutVariablePrimal.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffOpt.forward-Tuple{DiffOpt.QPDiff}","page":"Reference","title":"DiffOpt.forward","text":"forward(model::QPDiff)\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffOpt.map_rows-Tuple{Function, Any, DiffOpt.ProductOfSets, Union{DiffOpt.Flattened, DiffOpt.Nested}}","page":"Reference","title":"DiffOpt.map_rows","text":"map_rows(f::Function, model, cones::ProductOfSets, map_mode::Union{Nested{T}, Flattened{T}})\n\nGiven a model, its cones and map_mode of type Nested (resp. Flattened), return a Vector{T} of length equal to the number of cones (resp. rows) in the conic form where the value for the index (resp. rows) corresponding to each cone is equal to f(ci, r) where ci is the corresponding constraint index in model and r is a UnitRange of the corresponding rows in the conic form.\n\n\n\n\n\n","category":"method"},{"location":"reference/#DiffOpt.quad_sym_half","page":"Reference","title":"DiffOpt.quad_sym_half","text":"quad_sym_half(func, vi1::MOI.VariableIndex, vi2::MOI.VariableIndex)\n\nReturn Q[i,j] = Q[j,i] where the quadratic terms of func is represented by x' Q x / 2 for a symmetric matrix Q where x[i] = vi1 and x[j] = vi2. Note that while this is equal to JuMP.coefficient(func, vi1, vi2) if vi1 != vi2, in the case vi1 == vi2, it is rather equal to 2JuMP.coefficient(func, vi1, vi2).\n\n\n\n\n\n","category":"function"},{"location":"reference/#DiffOpt.standard_form","page":"Reference","title":"DiffOpt.standard_form","text":"standard_form(func::AbstractLazyScalarFunction)\n\nConverts func to a standard MOI scalar function.\n\nstandard_form(func::MOItoJuMP)\n\nConverts func to a standard JuMP scalar function.\n\n\n\n\n\n","category":"function"},{"location":"reference/#DiffOpt.π-Union{Tuple{T}, Tuple{Vector{T}, MathOptInterface.ModelLike, DiffOpt.ProductOfSets}} where T","page":"Reference","title":"DiffOpt.π","text":"π(v::Vector{Float64}, model::MOI.ModelLike, cones::ProductOfSets)\n\nGiven a model, its cones, find the projection of the vectors v of length equal to the number of rows in the conic form onto the cartesian product of the cones corresponding to these rows. For more info, refer to https://github.com/matbesancon/MathOptSetDistances.jl\n\n\n\n\n\n","category":"method"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Create a differentiable model from existing optimizers","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"using JuMP\nimport DiffOpt\nimport SCS\n\nmodel = DiffOpt.diff_optimizer(SCS.Optimizer)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Update and solve the model ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"x = MOI.add_variables(model, 2)\nc = MOI.add_constraint(model, ...)\n\nMOI.optimize!(model)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Finally differentiate the model (primal and dual variables specifically) to obtain product of jacobians with respect to problem parameters and a backward pass vector. Currently DiffOpt supports two backends for differentiating a model:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"To differentiate Convex Quadratic Program","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"beginalign*\n min_x in mathbbR^n  frac12 x^T Q x + q^T x   \n textst                A x = b        qquad         b in mathbbR^m \n                            G x leq h     qquad         h in mathbbR^p\nendalign*","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"we can use the backward method","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"MOI.set.(model,\n    DiffOpt.BackwardInVariablePrimal(), x, ones(2))\nDiffOpt.backward(model)\ngrad_obj = MOI.get(model, DiffOpt.BackwardOutObjective())\ngrad_con = MOI.get.(model, DiffOpt.BackwardOutConstraint(), c)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"To differentiate convex conic program","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"beginalign*\n min_x in mathbbR^n  c^T x \n textst                A x + s = b  \n                            b in mathbbR^m  \n                            s in mathcalK\nendalign*","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"we can use the forward method with perturbations in matrices A, b, c","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"import LinearAlgebra: ⋅\nMOI.set(model, DiffOpt.ForwardInObjective(), ones(2) ⋅ x)\nDiffOpt.forward(model)\ngrad_x = MOI.get.(model, DiffOpt.ForwardOutVariablePrimal(), x)","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"EditURL = \"https://github.com/jump-dev/DiffOpt.jl/blob/master/docs/src/examples/Thermal_Generation_Dispatch_Example.jl\"","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/#Thermal-Generation-Dispatch-Example","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"","category":"section"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"(Image: )","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"This example illustrates the sensitivity analysis of thermal generation dispatch problem.","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"This problem can be described as the choice of thermal generation g given a demand d, a price for thermal generation c and a penalty price c_{ϕ} for any demand not attended ϕ.","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"beginsplit\nbeginarray ll\nmboxminimize  sum_i=1^N c_i g_i + c_phi phi \nmboxst  g_i ge 0 quad i=1N  \n             g_i le G_i quad i=1N  \n             sum_i=1^N g_i + phi = d\nendarray\nendsplit","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"where","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"G_{i} is the maximum possible generation for a thermal generator i","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/#Define-and-solve-the-Thermal-Dispatch-Problem","page":"Thermal Generation Dispatch Example","title":"Define and solve the Thermal Dispatch Problem","text":"","category":"section"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"First, import the libraries.","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"using Test\nusing JuMP\nimport DiffOpt\nimport LinearAlgebra: dot\nimport HiGHS\nimport MathOptInterface\nimport Plots\nconst MOI = MathOptInterface","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Define the model that will be construct given a set of parameters.","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"function generate_model(d::Float64; g_sup::Vector{Float64}, c_g::Vector{Float64}, c_ϕ::Float64)\n    # Creation of the Model and Parameters\n    model = Model(() -> DiffOpt.diff_optimizer(HiGHS.Optimizer))\n    set_silent(model)\n    I = length(g_sup)\n\n    # Variables\n    @variable(model, g[i in  1:I] >= 0.0)\n    @variable(model, ϕ >= 0.0)\n\n    # Constraints\n    @constraint(model, limit_constraints_sup[i in 1:I], g[i] <= g_sup[i])\n    @constraint(model, demand_constraint, sum(g) + ϕ == d)\n\n    # Objectives\n    @objective(model, Min, dot(c_g, g) + c_ϕ * ϕ)\n\n    # Solve the model\n    optimize!(model)\n\n    # Return the solved model\n    return model\nend","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Define the functions that will get the primal values g and \\phi and sensitivity analysis of the demand dg/dd and d\\phi/dd from a optimized model.","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"function diff_forward(model::Model, ϵ::Float64 = 1.0)\n    # Initialization of parameters and references to simplify the notation\n    vect_ref = [model[:g]; model[:ϕ]]\n    I = length(model[:g])\n\n    # Get the primal solution of the model\n    vect =  MOI.get.(model, MOI.VariablePrimal(), vect_ref)\n\n    # Pass the perturbation to the DiffOpt Framework and set the context to Forward\n    constraint_equation = convert(MOI.ScalarAffineFunction{Float64}, ϵ)\n    MOI.set(model, DiffOpt.ForwardInConstraint(), model[:demand_constraint], constraint_equation)\n    DiffOpt.forward(model)\n\n    # Get the derivative of the model\n    dvect = MOI.get.(model, DiffOpt.ForwardOutVariablePrimal(), vect_ref)\n\n    # Return the values as a vector\n    return [vect; dvect]\nend\n\nfunction diff_backward(model::Model, ϵ::Float64 = 1.0)\n    # Initialization of parameters and references to simplify the notation\n    vect_ref = [model[:g]; model[:ϕ]]\n    I = length(model[:g])\n\n    # Get the primal solution of the model\n    vect =  MOI.get.(model, MOI.VariablePrimal(), vect_ref)\n\n    # Set variables needed for the DiffOpt Backward Framework\n    dvect = Array{Float64, 1}(undef, I + 1)\n    perturbation = zeros(I + 1)\n\n    # Loop for each primal variable\n    for i in 1:I+1\n        # Set the perturbation in the Primal Variables and set the context to Backward\n        perturbation[i] = ϵ\n        MOI.set.(model, DiffOpt.BackwardInVariablePrimal(), vect_ref, perturbation)\n        DiffOpt.backward(model)\n\n        # Get the value of the derivative of the model\n        dvect[i] = JuMP.constant(MOI.get(model, DiffOpt.BackwardOutConstraint(), model[:demand_constraint]))\n        perturbation[i] = 0.0\n    end\n\n    # Return the values as a vector\n    return [vect;dvect]\nend","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Initialize of Parameters","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"g_sup = [10.0, 20.0, 30.0]\nI = length(g_sup)\nd = 0.0:0.1:80\nd_size = length(d)\nc_g = [1.0, 3.0, 5.0]\nc_ϕ = 10.0\n;\nnothing #hide","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Generate models for each demand d","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"models = generate_model.(d; g_sup = g_sup, c_g = c_g, c_ϕ = c_ϕ);\nnothing #hide","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Get the results of models with the DiffOpt Forward and Backward context","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"result_forward = diff_forward.(models)\noptimize!.(models)\nresult_backward = diff_backward.(models);\nnothing #hide","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Organization of results to plot Initialize data_results that will contain every result","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"data_results = Array{Float64,3}(undef, 2, d_size, 2*(I+1));\nnothing #hide","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Populate the data_results array","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"for k in 1:d_size\n    data_results[1,k,:] = result_forward[k]\n    data_results[2,k,:] = result_backward[k]\nend","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/#Results-with-Plot-graphs","page":"Thermal Generation Dispatch Example","title":"Results with Plot graphs","text":"","category":"section"},{"location":"examples/Thermal_Generation_Dispatch_Example/#Results-for-the-forward-context","page":"Thermal Generation Dispatch Example","title":"Results for the forward context","text":"","category":"section"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Result Primal Values:","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Plots.plot(d,data_results[1,:,1:I+1],\n    title=\"Generation by Demand\",label=[\"Thermal Generation 1\" \"Thermal Generation 2\" \"Thermal Generation 3\" \"Generation Deficit\"],\n    xlabel=\"Demand [unit]\",ylabel= \"Generation [unit]\"\n)","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Result Sensitivity Analysis:","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Plots.plot(d,data_results[1,:,I+2:2*(I+1)],\n    title=\"Sensitivity of Generation by Demand\",label=[\"T. Gen. 1 Sensitivity\" \"T. Gen. 2 Sensitivity\" \"T. Gen. 3 Sensitivity\" \"Gen. Deficit Sensitivity\"],\n    xlabel=\"Demand [unit]\",ylabel= \"Sensitivity [-]\"\n)","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/#Results-for-the-backward-context","page":"Thermal Generation Dispatch Example","title":"Results for the backward context","text":"","category":"section"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Result Primal Values:","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Plots.plot(d,data_results[2,:,1:I+1],\n    title=\"Generation by Demand\",label=[\"Thermal Generation 1\" \"Thermal Generation 2\" \"Thermal Generation 3\" \"Generation Deficit\"],\n    xlabel=\"Demand [unit]\",ylabel= \"Generation [unit]\"\n)","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Result Sensitivity Analysis:","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"Plots.plot(d,data_results[2,:,I+2:2*(I+1)],\n    title=\"Sensitivity of Generation by Demand\",label=[\"T. Gen. 1 Sensitivity\" \"T. Gen. 2 Sensitivity\" \"T. Gen. 3 Sensitivity\" \"Gen. Deficit Sensitivity\"],\n    xlabel=\"Demand [unit]\",ylabel= \"Sensitivity [-]\"\n)","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"","category":"page"},{"location":"examples/Thermal_Generation_Dispatch_Example/","page":"Thermal Generation Dispatch Example","title":"Thermal Generation Dispatch Example","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#DiffOpt.jl","page":"Home","title":"DiffOpt.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DiffOpt.jl is a package for differentiating convex optimization program (JuMP.jl or MathOptInterface.jl models) with respect to program parameters. Note that this package does not contain any solver. This package has two major backends, available via backward and forward methods, to differentiate models (quadratic or conic) with optimal solutions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nCurrently supports linear programs (LP), convex quadratic programs (QP) and convex conic programs (SDP, SOCP constraints only). ","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"DiffOpt can be installed through the Julia package manager:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v1.3) pkg> add https://github.com/jump-dev/DiffOpt.jl","category":"page"},{"location":"#Why-are-Differentiable-optimization-problems-important?","page":"Home","title":"Why are Differentiable optimization problems important?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Differentiable optimization is a promising field of convex optimization and has many potential applications in game theory, control theory and machine learning (specifically deep learning - refer this video for more). Recent work has shown how to differentiate specific subclasses of convex optimization problems. But several applications remain unexplored (refer section 8 of this really good thesis). With the help of automatic differentiation, differentiable optimization can have a significant impact on creating end-to-end differentiable systems to model neural networks, stochastic processes, or a game.","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions to this package are more than welcome, if you find a bug or have any suggestions for the documentation please post it on the github issue tracker.","category":"page"},{"location":"","page":"Home","title":"Home","text":"When contributing please note that the package follows the JuMP style guide","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"EditURL = \"https://github.com/jump-dev/DiffOpt.jl/blob/master/docs/src/examples/chainrules_unit.jl\"","category":"page"},{"location":"examples/chainrules_unit/#ChainRules-integration-demo:-Relaxed-Unit-Commitment","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"","category":"section"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"(Image: )","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"In this example, we will demonstrate the integration of DiffOpt with ChainRulesCore.jl, the library allowing the definition of derivatives for functions that can then be used by automatic differentiation systems.","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"using JuMP\nimport DiffOpt\nimport Plots\nimport LinearAlgebra: ⋅\nimport HiGHS\nimport ChainRulesCore","category":"page"},{"location":"examples/chainrules_unit/#Unit-commitment-problem","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"Unit commitment problem","text":"","category":"section"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"We will consider a unit commitment problem, finding the cost-minimizing activation of generation units in a power network over multiple time periods. The considered constraints include:","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"Demand satisfaction of several loads\nRamping constraints\nGeneration limits.","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"The decisions are:","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"u_it in 01: activation of the i-th unit at time t\np_it: power output of the i-th unit at time t.","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"DiffOpt handles convex optimization problems only, we therefore relax the domain of the u_it variables to left01right.","category":"page"},{"location":"examples/chainrules_unit/#Primal-UC-problem","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"Primal UC problem","text":"","category":"section"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"ChainRules defines the differentiation of functions. The actual function that is differentiated in the context of DiffOpt is the solution map taking in input the problem parameters and returning the solution.","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"function unit_commitment(\n        load1_demand, load2_demand, gen_costs, noload_costs;\n        model = Model(HiGHS.Optimizer), silent=false)\n    MOI.set(model, MOI.Silent(), silent)\n\n    # Problem data\n    units = [1, 2] # Generator identifiers\n    load_names = [\"Load1\", \"Load2\"] # Load identifiers\n    n_periods = 4 # Number of time periods\n    Pmin = Dict(1 => fill(0.5, n_periods), 2 => fill(0.5, n_periods)) # Minimum power output (pu)\n    Pmax = Dict(1 => fill(3.0, n_periods), 2 => fill(3.0, n_periods)) # Maximum power output (pu)\n    RR = Dict(1 => 0.25, 2 => 0.25) # Ramp rates (pu/min)\n    P0 = Dict(1 => 0.0, 2 => 0.0) # Initial power output (pu)\n    D = Dict(\"Load1\" => load1_demand, \"Load2\" => load2_demand) # Demand (pu)\n    Cp = Dict(1 => gen_costs[1], 2 => gen_costs[2]) # Generation cost coefficient ($/pu)\n    Cnl = Dict(1 => noload_costs[1], 2 => noload_costs[2]) # No-load cost ($)\n\n    # Variables\n    # Note: u represents the activation of generation units.\n    # Would be binary in the typical UC problem, relaxed here to u ∈ [0,1]\n    # for a linear relaxation.\n    @variable(model, 0 <= u[g in units, t in 1:n_periods] <= 1) # Commitment\n    @variable(model, p[g in units, t in 1:n_periods] >= 0) # Power output (pu)\n\n    # Constraints\n\n    # Energy balance\n    @constraint(\n        model,\n        energy_balance_cons[t in 1:n_periods],\n        sum(p[g, t] for g in units) == sum(D[l][t] for l in load_names),\n    )\n\n    # Generation limits\n    @constraint(model, [g in units, t in 1:n_periods], Pmin[g][t] * u[g, t] <= p[g, t])\n    @constraint(model, [g in units, t in 1:n_periods], p[g, t] <= Pmax[g][t] * u[g, t])\n\n    # Ramp rates\n    @constraint(model, [g in units, t in 2:n_periods], p[g, t] - p[g, t - 1] <= 60 * RR[g])\n    @constraint(model, [g in units], p[g, 1] - P0[g] <= 60 * RR[g])\n    @constraint(model, [g in units, t in 2:n_periods], p[g, t - 1] - p[g, t] <= 60 * RR[g])\n    @constraint(model, [g in units], P0[g] - p[g, 1] <= 60 * RR[g])\n\n    # Objective\n    @objective(\n        model,\n        Min,\n        sum((Cp[g] * p[g, t]) + (Cnl[g] * u[g, t]) for g in units, t in 1:n_periods),\n    )\n\n    optimize!(model)\n    # asserting finite optimal value\n    @assert termination_status(model) == MOI.OPTIMAL\n    # converting to dense matrix\n    return JuMP.value.(p.data)\nend\n\nm = Model(HiGHS.Optimizer)\n@show unit_commitment(\n    [1.0, 1.2, 1.4, 1.6], [1.0, 1.2, 1.4, 1.6],\n    [1000.0, 1500.0], [500.0, 1000.0],\n    model=m, silent=true\n)","category":"page"},{"location":"examples/chainrules_unit/#Perturbation-of-a-single-input-parameter","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"Perturbation of a single input parameter","text":"","category":"section"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"Let us vary the demand at the second time frame on both loads:","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"demand_values = 0.05:0.05:3.0\npvalues = map(demand_values) do di\n    unit_commitment(\n        [1.0, di, 1.4, 1.6], [1.0, di, 1.4, 1.6],\n        [1000.0, 1500.0], [500.0, 1000.0],\n        silent=true,\n    )\nend\npflat = [getindex.(pvalues, i) for i in eachindex(pvalues[1])];\nnothing #hide","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"The influence of this variation of the demand is piecewise linear on the generation at different time frames:","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"Plots.scatter(demand_values, pflat, xaxis = (\"Demand\"), yaxis = (\"Generation\"))\nPlots.title!(\"Different time frames and generators\")\nPlots.xlims!(0.0, 3.5)","category":"page"},{"location":"examples/chainrules_unit/#Forward-Differentiation","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"Forward Differentiation","text":"","category":"section"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"Forward differentiation rule for the solution map of the unit commitment problem. It takes as arguments:","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"the perturbations on the input parameters\nthe differentiated function\nthe primal values of the input parameters,","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"and returns a tuple (primal_output, perturbations), the main primal result and the perturbation propagated to this result:","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"function ChainRulesCore.frule(\n        (_, Δload1_demand, Δload2_demand, Δgen_costs, Δnoload_costs),\n        ::typeof(unit_commitment),\n        load1_demand, load2_demand, gen_costs, noload_costs;\n        optimizer=HiGHS.Optimizer,\n        )\n    # creating the UC model with a DiffOpt optimizer wrapper around HiGHS\n    model = Model(() -> DiffOpt.diff_optimizer(optimizer))\n    # building and solving the main model\n    pv = unit_commitment(\n        load1_demand, load2_demand, gen_costs, noload_costs, model=model)\n    energy_balance_cons = model[:energy_balance_cons]\n\n    # Setting some perturbation of the energy balance constraints\n    # Perturbations are set as MOI functions\n    Δenergy_balance = [\n        convert(MOI.ScalarAffineFunction{Float64}, d1 + d2)\n        for (d1, d2) in zip(Δload1_demand, Δload2_demand)\n    ]\n    MOI.set.(\n        model,\n        DiffOpt.ForwardInConstraint(), energy_balance_cons,\n        Δenergy_balance,\n    )\n\n    p = model[:p]\n    u = model[:u]\n\n    # setting the perturbation of the linear objective\n    Δobj = sum(Δgen_costs ⋅ p[:,t] + Δnoload_costs ⋅ u[:,t] for t in size(p, 2))\n    MOI.set(model, DiffOpt.ForwardInObjective(), Δobj)\n    DiffOpt.forward(JuMP.backend(model))\n    # querying the corresponding perturbation of the decision\n    Δp = MOI.get.(model, DiffOpt.ForwardOutVariablePrimal(), p)\n    return (pv, Δp.data)\nend","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"We can now compute the perturbation of the output powers Δpv for a perturbation of the first load demand at time 2:","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"load1_demand = [1.0, 1.0, 1.4, 1.6]\nload2_demand = [1.0, 1.0, 1.4, 1.6]\ngen_costs = [1000.0, 1500.0]\nnoload_costs = [500.0, 1000.0];\nnothing #hide","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"all input perturbations are 0 except first load at time 2","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"Δload1_demand = 0 * load1_demand\nΔload1_demand[2] = 1.0\nΔload2_demand = 0 * load2_demand\nΔgen_costs = 0 * gen_costs\nΔnoload_costs = 0 * noload_costs\n(pv, Δpv) = ChainRulesCore.frule(\n    (nothing, Δload1_demand, Δload2_demand, Δgen_costs, Δnoload_costs),\n    unit_commitment,\n    load1_demand, load2_demand, gen_costs, noload_costs,\n)\n\nΔpv","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"The result matches what we observe in the previous figure: the generation of the first generator at the second time frame (third element on the plot).","category":"page"},{"location":"examples/chainrules_unit/#Reverse-mode-differentiation-of-the-solution-map","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"Reverse-mode differentiation of the solution map","text":"","category":"section"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"The rrule returns the primal and a pullback. The pullback takes a seed for the optimal solution ̄p and returns derivatives with respect to each input parameter of the function.","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"function ChainRulesCore.rrule(\n        ::typeof(unit_commitment),\n        load1_demand, load2_demand, gen_costs, noload_costs;\n        optimizer=HiGHS.Optimizer,\n        silent=false)\n    model = Model(() -> DiffOpt.diff_optimizer(optimizer))\n    # solve the forward UC problem\n    pv = unit_commitment(\n        load1_demand, load2_demand, gen_costs, noload_costs,\n        model=model, silent=silent)\n    function pullback_unit_commitment(pb)\n        p = model[:p]\n        u = model[:u]\n        energy_balance_cons = model[:energy_balance_cons]\n\n        MOI.set.(model, DiffOpt.BackwardInVariablePrimal(), p, pb)\n        DiffOpt.backward(JuMP.backend(model))\n\n        obj = MOI.get(model, DiffOpt.BackwardOutObjective())\n\n        # computing derivative wrt linear objective costs\n        dgen_costs = similar(gen_costs)\n        dgen_costs[1] = sum(JuMP.coefficient.(obj, p[1,:]))\n        dgen_costs[2] = sum(JuMP.coefficient.(obj, p[2,:]))\n\n        dnoload_costs = similar(noload_costs)\n        dnoload_costs[1] = sum(JuMP.coefficient.(obj, u[1,:]))\n        dnoload_costs[2] = sum(JuMP.coefficient.(obj, u[2,:]))\n\n        # computing derivative wrt constraint constant\n        dload1_demand = JuMP.constant.(\n            MOI.get.(model, DiffOpt.BackwardOutConstraint(), energy_balance_cons))\n        dload2_demand = copy(dload1_demand)\n        return (dload1_demand, dload2_demand, dgen_costs, dnoload_costs)\n    end\n    return (pv, pullback_unit_commitment)\nend","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"We can set a seed of one on the power of the first generator at the second time frame and zero for all other parts of the solution:","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"(pv, pullback_unit_commitment) = ChainRulesCore.rrule(\n    unit_commitment,\n    load1_demand, load2_demand, gen_costs, noload_costs,\n    optimizer=HiGHS.Optimizer,\n    silent=true,\n)\ndpv = 0 * pv\ndpv[1,2] = 1\ndargs = pullback_unit_commitment(dpv)\n(dload1_demand, dload2_demand, dgen_costs, dnoload_costs) = dargs;\nnothing #hide","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"The sensitivities with respect to the load demands are:","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"dload1_demand","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"and:","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"dload2_demand","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"The sensitivity of the generation is propagated to the sensitivity of both loads at the second time frame.","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"This example integrating ChainRules was designed with support from Invenia Technical Computing.","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"","category":"page"},{"location":"examples/chainrules_unit/","page":"ChainRules integration demo: Relaxed Unit Commitment","title":"ChainRules integration demo: Relaxed Unit Commitment","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"EditURL = \"https://github.com/jump-dev/DiffOpt.jl/blob/master/docs/src/examples/custom-relu.jl\"","category":"page"},{"location":"examples/custom-relu/#Custom-ReLU-layer","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"","category":"section"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"(Image: )","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"We demonstrate how DiffOpt can be used to generate a simple neural network unit - the ReLU layer. A neural network is created using Flux.jl and trained on the MNIST dataset.","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"This tutorial uses the following packages","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"using JuMP\nimport DiffOpt\nimport Ipopt\nimport ChainRulesCore\nimport Flux\nimport MLDatasets\nimport Statistics\nimport Base.Iterators: repeated\nusing LinearAlgebra","category":"page"},{"location":"examples/custom-relu/#The-ReLU-and-its-derivative","page":"Custom ReLU layer","title":"The ReLU and its derivative","text":"","category":"section"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"Define a relu through an optimization problem solved by a quadratic solver. Return the solution of the problem.","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"function matrix_relu(\n    y::Matrix;\n    model = Model(() -> DiffOpt.diff_optimizer(Ipopt.Optimizer))\n)\n    N, M = size(y)\n    empty!(model)\n    set_silent(model)\n    @variable(model, x[1:N, 1:M] >= 0)\n    @objective(model, Min, x[:]'x[:] -2y[:]'x[:])\n    optimize!(model)\n    return value.(x)\nend","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"Define the backward differentiation rule, for the function we defined above.","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"function ChainRulesCore.rrule(::typeof(matrix_relu), y::Matrix{T}) where T\n    model = Model(() -> DiffOpt.diff_optimizer(Ipopt.Optimizer))\n    pv = matrix_relu(y, model = model)\n    function pullback_matrix_relu(dl_dx)\n        # some value from the backpropagation (e.g., loss) is denoted by `l`\n        # so `dl_dy` is the derivative of `l` wrt `y`\n        x = model[:x] ## load decision variable `x` into scope\n        dl_dy = zeros(T, size(dl_dx))\n        dl_dq = zeros(T, size(dl_dx))\n        # set sensitivities\n        MOI.set.(model, DiffOpt.BackwardInVariablePrimal(), x[:], dl_dx[:])\n        # compute grad\n        DiffOpt.backward(model)\n        # return gradient wrt objective function parameters\n        obj_exp = MOI.get(model, DiffOpt.BackwardOutObjective())\n        # coeff of `x` in q'x = -2y'x\n        dl_dq[:] .= JuMP.coefficient.(obj_exp, x[:])\n        dq_dy = -2 ## dq/dy = -2\n        dl_dy[:] .= dl_dq[:] * dq_dy\n        return (ChainRulesCore.NoTangent(), dl_dy,)\n    end\n    return pv, pullback_matrix_relu\nend","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"For more details about backpropagation, visit Introduction, ChainRulesCore.jl.","category":"page"},{"location":"examples/custom-relu/#prepare-data","page":"Custom ReLU layer","title":"prepare data","text":"","category":"section"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"N = 1000\nimgs = MLDatasets.MNIST.traintensor(1:N)\nlabels = MLDatasets.MNIST.trainlabels(1:N);\nnothing #hide","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"Preprocessing","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"train_X = float.(reshape(imgs, size(imgs, 1) * size(imgs, 2), N)) ## stack all the images\ntrain_Y = Flux.onehotbatch(labels, 0:9);\n\ntest_imgs = MLDatasets.MNIST.testtensor(1:N)\ntest_X = float.(reshape(test_imgs, size(test_imgs, 1) * size(test_imgs, 2), N))\ntest_Y = Flux.onehotbatch(MLDatasets.MNIST.testlabels(1:N), 0:9);\nnothing #hide","category":"page"},{"location":"examples/custom-relu/#Define-the-Network","page":"Custom ReLU layer","title":"Define the Network","text":"","category":"section"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"Network structure","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"inner = 10\n\nm = Flux.Chain(\n    Flux.Dense(784, inner), ## 784 being image linear dimension (28 x 28)\n    matrix_relu,\n    Flux.Dense(inner, 10), ## 10 being the number of outcomes (0 to 9)\n    Flux.softmax,\n)","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"Define input data The original data is repeated epochs times because Flux.train! only loops through the data set once","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"epochs = 50 # ~1 minute (i7 8th gen with 16gb RAM)\n# epochs = 100 # leads to 77.8% in about 2 minutes\n\ndataset = repeated((train_X, train_Y), epochs);\nnothing #hide","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"Parameters for the network training","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"training loss function, Flux optimizer","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"custom_loss(x, y) = Flux.crossentropy(m(x), y)\nopt = Flux.ADAM()\nevalcb = () -> @show(custom_loss(train_X, train_Y))","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"Train to optimize network parameters","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"@time Flux.train!(custom_loss, Flux.params(m), dataset, opt, cb = Flux.throttle(evalcb, 5));\nnothing #hide","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"Although our custom implementation takes time, it is able to reach similar accuracy as the usual ReLU function implementation.","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"Average of correct guesses","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"accuracy(x, y) = Statistics.mean(Flux.onecold(m(x)) .== Flux.onecold(y));\nnothing #hide","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"Training accuracy","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"accuracy(train_X, train_Y)","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"Test accuracy","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"accuracy(test_X, test_Y)","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"Note that the accuracy is low due to simplified training. It is possible to increase the number of samples N, the number of epochs epoch and the connectivity inner.","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"","category":"page"},{"location":"examples/custom-relu/","page":"Custom ReLU layer","title":"Custom ReLU layer","text":"This page was generated using Literate.jl.","category":"page"}]
}
